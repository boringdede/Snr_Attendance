# bot.py ‚Äî aiogram v2.25.1
# –§–∏—á–∏: SNR School (—Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ), –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∞–¥–∏–∫–æ–≤ –ø–æ –¥–Ω—è–º, —É–¥–∞–ª–µ–Ω–∏–µ —Å–∞–¥–∏–∫–æ–≤ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º,
# "–≤–æ –≤—Ä–µ–º—è" —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–¥–∏—É—Å–µ (—á–µ–∫-–∏–Ω –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ LATE_GRACE_MIN –º–∏–Ω—É—Ç –ø–æ–∑–∂–µ),
# –∞–≤—Ç–æ-–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —á–µ–∫-–∏–Ω–∞ –∫ start+–≥—Ä–µ–π—Å (–≤ –∞–¥–º–∏–Ω-—á–∞—Ç, –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —É—á–∏—Ç–µ–ª—è–º).

import csv
import logging
import re
import asyncio
from contextlib import suppress
from datetime import datetime, timezone, timedelta
from pathlib import Path

from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.exceptions import Throttled
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
import os
API_TOKEN = os.getenv(8278332572:AAEraxNTF4-01luv6A0mwkqv7zL-zBRKag0)   # ‚Üê –≤–æ—Ç —Ç–∞–∫ –î–û–õ–ñ–ù–û –±—ã—Ç—å
ADMIN_IDS = {2062714005}
ADMIN_IDS = {1790286972}
ADMIN_CHAT_IDS = {-1002362042916}

RADIUS_M_DEFAULT = 200.0
CITY_TZ_HOURS = 5         # Asia/Tashkent UTC+5
LATE_GRACE_MIN = 10       # –≥—Ä–µ–π—Å –∫ –Ω–∞—á–∞–ª—É —Å–ª–æ—Ç–∞ (–º–∏–Ω—É—Ç—ã) –¥–ª—è "–≤–æ –≤—Ä–µ–º—è" –∏ —à—Ç—Ä–∞—Ñ–æ–≤

# ---- –õ–û–ì–ò ----
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")
log = logging.getLogger("snr-checkin-bot")

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (—Å —Ñ–æ–ª–±—ç–∫–æ–º)
try:
    from zoneinfo import ZoneInfo, ZoneInfoNotFoundError
    try:
        TZ = ZoneInfo("Asia/Tashkent")
    except ZoneInfoNotFoundError:
        TZ = timezone(timedelta(hours=CITY_TZ_HOURS))
except Exception:
    TZ = timezone(timedelta(hours=CITY_TZ_HOURS))

# ---- –§–ê–ô–õ–´ ----
DATA_DIR = Path("."); DATA_DIR.mkdir(parents=True, exist_ok=True)
CHECKS_CSV = DATA_DIR / "checks.csv"
PROFILES_CSV = DATA_DIR / "profiles.csv"

# ====== –ú–ï–°–¢–ê (–±–∞–∑–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) + SNR ======
BASE_PLACES = {
    "SNR School": {"full": "SNR School (–æ—Ñ–∏—Å)", "lat": 41.322921, "lon": 69.277808, "radius_m": 200.0, "free_time": True},
    "559 –≥–æ—Å": {"full": "559 –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∞–¥–∏–∫", "lat": 41.303288, "lon": 69.292031, "radius_m": 200.0, "free_time": False},
    "First kids": {"full": "First kids", "lat": 41.329848, "lon": 69.286872, "radius_m": 200.0, "free_time": False},
    "FIRST":      {"full": "First kids", "lat": 41.329848, "lon": 69.286872, "radius_m": 200.0, "free_time": False},
    "Domik": {"full": "–î–û–ú–ò–ö", "lat": 41.321701, "lon": 69.315380, "radius_m": 200.0, "free_time": False},
    "Small steps": {"full": "Small steps", "lat": 41.294155, "lon": 69.189863, "radius_m": 200.0, "free_time": False},
    "STARKIDS": {"full": "STARKIDS", "lat": 41.298992, "lon": 69.260579, "radius_m": 200.0, "free_time": False},
    "–ê–∫–∞–¥–µ–º–∏—è –¢–∞–ª–∞–Ω—Ç–æ–≤": {"full": "–ê–∫–∞–¥–µ–º–∏—è –¢–∞–ª–∞–Ω—Ç–æ–≤", "lat": 41.313393, "lon": 69.294289, "radius_m": 200, "free_time": False},
    "324 –≥–æ—Å": {"full": "324 –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∞–¥–∏–∫", "lat": 41.335171, "lon": 69.335863, "radius_m": 200, "free_time": False},
}
PLACES = {}  # runtime: –∏–º—è -> dict

# ====== –†–ê–°–ü–ò–°–ê–ù–ò–ï ======
# –ü–Ω=0..–í—Å=6; SNR School ‚Äî free_time (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω, –±–µ–∑ —Å–ª–æ—Ç–æ–≤)
SCHEDULE = {
    0: [ {"start": "09:00", "end": "12:30", "place": "559 –≥–æ—Å"},
         {"start": "15:45", "end": "16:30", "place": "559 –≥–æ—Å"},
         {"start": "10:00", "end": "11:30", "place": "First kids"} ],
    1: [ {"start": "10:30", "end": "11:00", "place": "–î–û–ú–ò–ö"},
         {"start": "15:00", "end": "16:00", "place": "324 –≥–æ—Å"} ],
    2: [ {"start": "09:00", "end": "12:30", "place": "559 –≥–æ—Å"},
         {"start": "15:45", "end": "16:30", "place": "559 –≥–æ—Å"},
         {"start": "10:00", "end": "11:00", "place": "Small steps"},
         {"start": "10:30", "end": "16:30", "place": "–ê–∫–∞–¥–µ–º–∏—è –¢–∞–ª–∞–Ω—Ç–æ–≤"} ],
    3: [ {"start": "10:30", "end": "11:00", "place": "–î–û–ú–ò–ö"} ],
    4: [ {"start": "09:30", "end": "12:30", "place": "STARKIDS"},
         {"start": "15:00", "end": "16:00", "place": "324 –≥–æ—Å"} ],
    5: [],
    6: [],
}

# ====== –ë–û–¢ ======
bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# runtime
STATE = {}                 # user_id -> {...}
PROFILES = {}              # –∫—ç—à
LATE_SENT_SLOTS = set()    # {(date, wd, place, start)} ‚Äî —É–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã

# ====== –£–¢–ò–õ–ò–¢–´ ======
def ensure_files():
    if not CHECKS_CSV.exists():
        with CHECKS_CSV.open("w", encoding="utf-8", newline="") as f:
            csv.writer(f, delimiter=";").writerow([
                "telegram_id","teacher_name","phone",
                "action","place_key","place_full",
                "date","time","weekday",
                "slot_start","slot_end",
                "lat","lon","distance_m","in_radius",
                "on_time","notes"
            ])
    if not PROFILES_CSV.exists():
        with PROFILES_CSV.open("w", encoding="utf-8", newline="") as f:
            csv.writer(f, delimiter=";").writerow(["telegram_id","teacher_name","phone"])

def safe_dict_reader(path: Path):
    if not path.exists(): return []
    rows=[]
    with path.open("r", encoding="utf-8", newline="") as f:
        r = csv.DictReader(f, delimiter=";")
        for row in r:
            if row: rows.append(row)
    return rows

def load_profiles_cache():
    PROFILES.clear()
    for row in safe_dict_reader(PROFILES_CSV):
        try:
            PROFILES[int(row["telegram_id"])] = {"name": row["teacher_name"], "phone": row["phone"]}
        except Exception:
            continue

def load_places_runtime():
    global PLACES
    PLACES = {k: dict(v) for k, v in BASE_PLACES.items()}

def weekday_ru(dt: datetime) -> str:
    return ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"][dt.weekday()]

def haversine_m(lat1, lon1, lat2, lon2) -> float:
    R = 6371000.0
    from math import radians, sin, cos, atan2, sqrt
    p1, p2 = radians(lat1), radians(lat2)
    dphi = radians(lat2 - lat1)
    dlmb = radians(lon2 - lon1)
    a = sin(dphi/2)**2 + cos(p1)*cos(p2)*sin(dlmb/2)**2
    c = 2 * atan2(sqrt(a), sqrt(1-a))
    return R * c

def pretty_m(m): return f"{int(round(m))} –º"
def gmaps(lat, lon): return f"https://maps.google.com/?q={lat},{lon}"

def main_kb(user_id: int | None = None):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"))
    kb.add(KeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å—Å—è (–≤—ã–±—Ä–∞—Ç—å —Å–ª–æ—Ç)"))
    kb.add(KeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return kb

def ask_contact_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True))
    kb.add(KeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return kb

def slots_kb(day_slots):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üè¢ SNR School ‚Äî —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è", callback_data="slot_snr"))
    for i, s in enumerate(day_slots):
        kb.add(InlineKeyboardButton(f"{s['place']} ‚Äî {s['start']}‚Äì{s['end']}", callback_data=f"slot:{i}"))
    return kb

def actions_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–ß–µ–∫-–∏–Ω (–ø—Ä–∏—Ö–æ–¥)", callback_data="act:in"))
    kb.add(InlineKeyboardButton("–ß–µ–∫-–∞—É—Ç (—É—Ö–æ–¥)",  callback_data="act:out"))
    return kb

def load_profile(uid: int):
    if uid in PROFILES: return PROFILES[uid]
    for row in safe_dict_reader(PROFILES_CSV):
        if row.get("telegram_id") == str(uid):
            PROFILES[uid] = {"name": row["teacher_name"], "phone": row["phone"]}
            return PROFILES[uid]
    return None

def save_profile(uid: int, name: str, phone: str|None):
    rows = {}
    for row in safe_dict_reader(PROFILES_CSV):
        try:
            rows[int(row["telegram_id"])] = (row["teacher_name"], row.get("phone",""))
        except Exception:
            continue
    if uid in rows: return
    rows[uid] = (name, phone or "")
    with PROFILES_CSV.open("w", encoding="utf-8", newline="") as f:
        w = csv.writer(f, delimiter=";")
        w.writerow(["telegram_id","teacher_name","phone"])
        for k, (n, p) in rows.items():
            w.writerow([k, n, p])
    PROFILES[uid] = {"name": name, "phone": phone or ""}

async def notify_admins(text: str):
    for chat_id in ADMIN_CHAT_IDS:
        with suppress(Exception):
            await bot.send_message(chat_id, text, disable_web_page_preview=True)

# ====== –ü–ê–†–°–ò–ù–ì –î–ù–ï–ô –ù–ï–î–ï–õ–ò ======
RU_DAYS = {
    "–ø–Ω":0, "–ø–æ–Ω":0, "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":0,
    "–≤—Ç":1, "–≤—Ç–æ—Ä–Ω–∏–∫":1,
    "—Å—Ä":2, "—Å—Ä–µ–¥–∞":2,
    "—á—Ç":3, "—á–µ—Ç–≤–µ—Ä–≥":3,
    "–ø—Ç":4, "–ø—è—Ç–Ω–∏—Ü–∞":4,
    "—Å–±":5, "—Å—É–±–±–æ—Ç–∞":5,
    "–≤—Å":6, "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":6,
}
def parse_days(text: str):
    txt = text.strip().lower()
    if txt in {"–≤—Å–µ", "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å", "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ", "–≤—Å—é –Ω–µ–¥–µ–ª—é"}:
        return list(range(7))
    parts = re.split(r"[,\s;]+", txt)
    out = []
    for p in parts:
        if not p: continue
        if p.isdigit():
            n = int(p)
            if n in range(7): out.append(n)
            elif n in range(1,8): out.append(n-1)
        else:
            p = p.strip(".")
            if p in RU_DAYS: out.append(RU_DAYS[p])
    return sorted(set(out))

# ====== /start ======
@dp.message_handler(commands=["start","help"])
async def on_start(message: types.Message):
    ensure_files()
    load_profiles_cache()
    load_places_runtime()

    uid = message.from_user.id
    prof = load_profile(uid)
    if not prof:
        STATE[uid] = {"phase": "need_name"}
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ò–º—è –∏ –§–∞–º–∏–ª–∏—é</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <i>–ê–∑–∏–∑ –ê–∑–∏–º–æ–≤</i>).")
        return
    STATE[uid] = {"phase": "idle"}
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{prof['name']}</b>! –ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=main_kb(uid))

# ====== –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ======
@dp.message_handler(commands=["id"])
async def cmd_id(message: types.Message):
    await message.answer(f"–í–∞—à Telegram ID: <code>{message.from_user.id}</code>")

@dp.message_handler(commands=["my"])
async def cmd_my(message: types.Message):
    uid = message.from_user.id
    prof = load_profile(uid) or {"name": message.from_user.full_name, "phone": ""}
    await message.answer(f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n–ò–º—è: <b>{prof['name']}</b>\n–¢–µ–ª–µ—Ñ–æ–Ω: <b>{prof.get('phone','')}</b>")

@dp.message_handler(commands=["schedule","today"])
async def cmd_schedule(message: types.Message):
    now = datetime.now(TZ); wd = now.weekday()
    day = SCHEDULE.get(wd, [])
    lines = [f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ <b>{weekday_ru(now)}</b>:"]
    lines.append("‚Ä¢ üè¢ SNR School ‚Äî —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è (–≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç)")
    if not day:
        lines.append("‚Ä¢ (—Å–ª–æ—Ç–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –Ω–µ—Ç)")
    else:
        for s in day:
            lines.append(f"‚Ä¢ {s['place']}: {s['start']}‚Äì{s['end']}")
    await message.answer("\n".join(lines))

# ====== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ======
@dp.message_handler(commands=["admin"])
async def admin_menu(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∞–¥–∏–∫ (–ø–æ—à–∞–≥–æ–≤–æ)", callback_data="admin:add_wizard"))
    kb.add(InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å–∞–¥–∏–∫–æ–≤", callback_data="admin:list_places"))
    kb.add(InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Å–∞–¥–∏–∫", callback_data="admin:del_place"))
    kb.add(InlineKeyboardButton("üìÜ –°–ª–æ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="admin:list_today"))
    await message.answer("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=kb)

# ====== –¢–ï–ö–°–¢-–†–û–£–¢–ï–† ======
@dp.message_handler(content_types=["text"])
async def text_router(message: types.Message):
    uid = message.from_user.id
    txt = (message.text or "").strip()
    st = STATE.get(uid, {})

    # –ø–µ—Ä–µ—Ö–≤–∞—Ç /admin
    if txt.startswith("/admin"):
        await admin_menu(message); return

    # –í–∏–∑–∞—Ä–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: —à–∞–≥ 1 ‚Äî –∏–º—è
    if st.get("phase") == "add_place_name" and uid in ADMIN_IDS:
        name = txt
        if not name:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            return
        if name in PLACES:
            await message.answer("–ú–µ—Å—Ç–æ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ –µ—Å—Ç—å. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
            return
        STATE[uid] = {"phase": "add_place_coords", "new_place": {"name": name}}
        await message.answer("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞</code>\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>41.300000, 69.300000</code>")
        return

    # —à–∞–≥ 2 ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    if st.get("phase") == "add_place_coords" and uid in ADMIN_IDS:
        m = re.fullmatch(r"\s*(-?\d+(?:\.\d+)?)\s*,\s*(-?\d+(?:\.\d+)?)\s*", txt)
        if not m:
            await message.answer("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã. –ü—Ä–∏–º–µ—Ä: <code>41.300000, 69.300000</code>")
            return
        lat = float(m.group(1)); lon = float(m.group(2))
        st["new_place"]["lat"] = lat; st["new_place"]["lon"] = lon
        STATE[uid] = {"phase": "add_place_times", "new_place": st["new_place"]}
        await message.answer(
            "–í—Ä–µ–º—è —Å–ª–æ—Ç–∞: <code>HH:MM-HH:MM</code>\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>09:00-12:30</code>"
        )
        return

    # —à–∞–≥ 3 ‚Äî –≤—Ä–µ–º—è
    if st.get("phase") == "add_place_times" and uid in ADMIN_IDS:
        m = re.fullmatch(r"\s*(\d{2}):(\d{2})\s*-\s*(\d{2}):(\d{2})\s*", txt)
        if not m:
            await message.answer("–í—Ä–µ–º—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ü—Ä–∏–º–µ—Ä: <code>09:00-12:30</code>")
            return
        start_s = f"{m.group(1)}:{m.group(2)}"
        end_s   = f"{m.group(3)}:{m.group(4)}"
        st["new_place"]["start"] = start_s
        st["new_place"]["end"] = end_s
        STATE[uid] = {"phase": "add_place_days", "new_place": st["new_place"]}
        await message.answer(
            "–î–Ω–∏ –Ω–µ–¥–µ–ª–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n"
            "- —á–∏—Å–ª–∞ 1-7 –∏–ª–∏ 0-6 (–ü–Ω=1/0 ... –í—Å=7/6),\n"
            "- –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è: –ø–Ω, –≤—Ç, —Å—Ä, —á—Ç, –ø—Ç, —Å–±, –≤—Å,\n"
            "- –∏–ª–∏ ¬´–≤—Å–µ¬ª.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–ø–Ω, —Å—Ä, –ø—Ç</code> –∏–ª–∏ <code>1,3,5</code>"
        )
        return

    # —à–∞–≥ 4 ‚Äî –¥–Ω–∏
    if st.get("phase") == "add_place_days" and uid in ADMIN_IDS:
        days = parse_days(txt)
        if not days:
            await message.answer("–î–Ω–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã. –ü—Ä–∏–º–µ—Ä: <code>–ø–Ω, —Å—Ä, –ø—Ç</code> –∏–ª–∏ <code>1,3,5</code>")
            return
        np = st["new_place"]
        name, lat, lon = np["name"], np["lat"], np["lon"]
        start_s, end_s = np["start"], np["end"]

        # 1) –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ
        PLACES[name] = {"full": name, "lat": lat, "lon": lon, "radius_m": RADIUS_M_DEFAULT, "free_time": False}
        # 2) –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ—Ç—ã —Ç–æ–ª—å–∫–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏
        for wd in days:
            SCHEDULE.setdefault(wd, []).append({"start": start_s, "end": end_s, "place": name})

        STATE[uid] = {"phase": "idle"}
        days_ru = ", ".join(["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"][d] for d in days)
        await message.answer(
            f"‚úÖ –°–∞–¥–∏–∫ ¬´{name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω.\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}\n–í—Ä–µ–º—è: {start_s}‚Äì{end_s}\n–î–Ω–∏: {days_ru}"
        )
        return

    if txt == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        STATE[uid] = {"phase": "idle"}
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb(uid))
        return

    if STATE.get(uid, {}).get("phase") == "need_name" and not load_profile(uid):
        if " " not in txt or len(txt) < 3:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: <i>–ê–∑–∏–∑ –ê–∑–∏–º–æ–≤</i>).")
            return
        save_profile(uid, txt, "")
        STATE[uid] = {"phase": "need_contact"}
        await message.answer(
            f"–°–ø–∞—Å–∏–±–æ, <b>{txt}</b>! –¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å <b>–∫–æ–Ω—Ç–∞–∫—Ç–æ–º</b> –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.",
            reply_markup=ask_contact_kb()
        )
        return

    if txt in ("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "/today", "/schedule"):
        await cmd_schedule(message)
        return

    if txt == "–û—Ç–º–µ—Ç–∏—Ç—å—Å—è (–≤—ã–±—Ä–∞—Ç—å —Å–ª–æ—Ç)":
        now = datetime.now(TZ); wd = now.weekday()
        day = SCHEDULE.get(wd, [])
        STATE[uid] = {"phase": "pick_slot"}
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ/—Å–ª–æ—Ç:", reply_markup=types.ReplyKeyboardRemove())
        await message.answer("‚¨áÔ∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π:", reply_markup=slots_kb(day))
        return

# ====== –∫–æ–Ω—Ç–∞–∫—Ç ======
@dp.message_handler(content_types=["contact"])
async def on_contact(message: types.Message):
    uid = message.from_user.id
    st = STATE.get(uid, {})
    if load_profile(uid):
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", reply_markup=main_kb(uid))
        return
    if st.get("phase") != "need_contact":
        return
    if not message.contact or message.contact.user_id != uid:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.")
        return
    prof = load_profile(uid) or {"name": message.from_user.full_name}
    save_profile(uid, prof["name"], message.contact.phone_number)
    STATE[uid] = {"phase": "idle"}
    await message.answer(
        f"–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ\n–ò–º—è: <b>{prof['name']}</b>\n–¢–µ–ª–µ—Ñ–æ–Ω: <b>{message.contact.phone_number}</b>",
        reply_markup=main_kb(uid)
    )

# ====== –≤—ã–±–æ—Ä —Å–ª–æ—Ç–∞ ======
@dp.callback_query_handler(lambda c: c.data.startswith("slot"))
async def on_slot(callback: types.CallbackQuery):
    uid = callback.from_user.id
    now = datetime.now(TZ); wd = now.weekday()
    day = SCHEDULE.get(wd, [])

    if callback.data == "slot_snr":
        slot = {"place": "SNR School", "start": "00:00", "end": "23:59", "free_time": True}
    else:
        try:
            idx = int(callback.data.split(":")[1])
            slot = dict(day[idx])
            slot["free_time"] = PLACES.get(slot["place"], {}).get("free_time", False)
        except Exception:
            await callback.answer("–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return

    STATE[uid] = {"phase": "pick_action", "slot": slot}
    label = "—Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è" if slot.get("free_time") else f"{slot['start']}‚Äì{slot['end']}"
    await callback.message.answer(
        f"–ú–µ—Å—Ç–æ: <b>{slot['place']}</b> ‚Äî {label}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=actions_kb()
    )
    await callback.answer()

# ====== –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è ======
@dp.callback_query_handler(lambda c: c.data.startswith("act:"))
async def on_action(callback: types.CallbackQuery):
    uid = callback.from_user.id
    st = STATE.get(uid, {})
    if st.get("phase") != "pick_action" or "slot" not in st:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç", show_alert=True); return
    action = callback.data.split(":")[1]  # in/out
    slot = st["slot"]
    STATE[uid] = {"phase": "await_location", "slot": slot, "action": action}
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True))
    kb.add(KeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    await callback.message.answer(
        f"{'–ß–µ–∫-–∏–Ω' if action=='in' else '–ß–µ–∫-–∞—É—Ç'} –¥–ª—è <b>{slot['place']}</b>\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.",
        reply_markup=kb
    )
    await callback.answer()

# ====== –ø—Ä–∏—ë–º –ª–æ–∫–∞—Ü–∏–∏ ======
@dp.message_handler(content_types=["location"])
async def on_location(message: types.Message):
    try:
        ensure_files()
        uid = message.from_user.id
        st = STATE.get(uid, {})
        if st.get("phase") != "await_location":
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç: ¬´–û—Ç–º–µ—Ç–∏—Ç—å—Å—è (–≤—ã–±—Ä–∞—Ç—å —Å–ª–æ—Ç)¬ª.", reply_markup=main_kb(uid))
            return

        slot = st["slot"]; action = st["action"]
        prof = load_profile(uid) or {"name": message.from_user.full_name, "phone": ""}

        now = datetime.now(TZ)
        date_s = now.strftime("%Y-%m-%d")
        time_s = now.strftime("%H:%M")
        wd_s = weekday_ru(now)

        place_key = slot["place"]
        place = PLACES.get(place_key, {"full": place_key, "lat": None, "lon": None, "radius_m": RADIUS_M_DEFAULT, "free_time": False})
        lat, lon = message.location.latitude, message.location.longitude

        in_radius = None
        dist_m = None
        if place["lat"] is not None and place["lon"] is not None:
            dist_m = haversine_m(lat, lon, place["lat"], place["lon"])
            in_radius = dist_m <= (place.get("radius_m") or RADIUS_M_DEFAULT)

        # –í—Ä–µ–º—è
        if place.get("free_time"):
            on_time = bool(in_radius)  # SNR: ¬´–≤–æ –≤—Ä–µ–º—è¬ª == –≤ —Ä–∞–¥–∏—É—Å–µ
            timing_line = "‚è∞ –°–≤–æ–±–æ–¥–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ (–±–µ–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è)"
        else:
            if in_radius:
                sh, sm = map(int, slot["start"].split(":"))
                eh, em = map(int, slot["end"].split(":"))
                start_dt = now.replace(hour=sh, minute=sm, second=0, microsecond=0)
                end_dt   = now.replace(hour=eh, minute=em, second=0, microsecond=0)
                if action == "in":
                    # —É—á–∏—Ç—ã–≤–∞–µ–º –≥—Ä–µ–π—Å (10 –º–∏–Ω—É—Ç –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ)
                    on_time = now <= (start_dt + timedelta(minutes=LATE_GRACE_MIN))
                    timing_line = f"‚è∞ –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫: {slot['start']} (+{LATE_GRACE_MIN} –º–∏–Ω)"
                else:
                    on_time = now >= end_dt
                    timing_line = f"‚è∞ –ö–æ–Ω–µ—Ü —Å–ª–æ—Ç–∞: {slot['end']}"
            else:
                on_time = False
                timing_line = f"‚è∞ –°–ª–æ—Ç: {slot.get('start','')}-{slot.get('end','')}"

        # –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        lines = [
            f"üìç <b>{prof['name']}</b>",
            f"üè´ {place['full']}",
            f"üìÖ {wd_s}",
            f"‚è± {time_s} {date_s}",
            f"üîÑ –î–µ–π—Å—Ç–≤–∏–µ: {'–ß–µ–∫-–∏–Ω' if action=='in' else '–ß–µ–∫-–∞—É—Ç'}",
        ]
        if not place.get("free_time"):
            lines.insert(4, f"üïò –°–ª–æ—Ç: {slot['start']}‚Äì{slot['end']}")

        if in_radius is None:
            lines.append("‚ö†Ô∏è –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –º–µ—Å—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–¥–∏—É—Å–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
            on_time = False
            status_line = "‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–¥–∏—É—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        elif in_radius is False:
            status_line = f"üö´ –í—ã –µ—â—ë –Ω–µ –ø—Ä–∏–±—ã–ª–∏ (–≤–Ω–µ —Ä–∞–¥–∏—É—Å–∞, {pretty_m(dist_m) if dist_m is not None else '—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})"
        else:
            if place.get("free_time"):
                status_line = "‚úÖ –ü—Ä–∏–±—ã–ª" if on_time else "‚õî –ù–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ"
            else:
                status_line = "‚úÖ –í–û –í–†–ï–ú–Ø" if on_time else ("‚è≥ –û–ü–û–ó–î–ê–õ‚ùóÔ∏è" if action == "in" else "‚è≥ –†–∞–Ω–æ —É—à—ë–ª")

        lines.append(status_line)
        lines.append(timing_line)

        text = "\n".join(lines)

        await message.answer(text, reply_markup=main_kb(uid), disable_web_page_preview=True)
        for chat_id in ADMIN_CHAT_IDS:
            with suppress(Exception):
                await bot.send_message(chat_id, text, disable_web_page_preview=True)
                await bot.send_location(chat_id, latitude=lat, longitude=lon)

        # –ó–∞–ø–∏—Å—å –≤ CSV
        with CHECKS_CSV.open("a", encoding="utf-8", newline="") as f:
            w = csv.writer(f, delimiter=";")
            w.writerow([
                uid, prof["name"], prof.get("phone",""),
                action,
                place_key, place["full"],
                date_s, time_s, wd_s,
                slot.get("start",""), slot.get("end",""),
                f"{lat:.6f}", f"{lon:.6f}",
                f"{round(dist_m,2) if dist_m is not None else ''}",
                (1 if in_radius else 0) if in_radius is not None else "",
                1 if (in_radius is True and on_time) else 0,
                "" if in_radius is None else ("" if in_radius else "–í–Ω–µ —Ä–∞–¥–∏—É—Å–∞")
            ])

        STATE[uid] = {"phase": "idle"}

    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ on_location")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await notify_admins(f"‚ùóÔ∏è –û—à–∏–±–∫–∞ on_location: <code>{type(e).__name__}</code> ‚Äî {e}")

# ====== –ê–î–ú–ò–ù –ö–û–õ–õ–ë–≠–ö–ò ======
@dp.callback_query_handler(lambda c: c.data.startswith("admin:"))
async def admin_actions(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    parts = callback.data.split(":", 2)  # –≤–∞–∂–Ω–æ: –º–∞–∫—Å–∏–º—É–º 3 —á–∞—Å—Ç–∏
    # —Ñ–æ—Ä–º–∞—Ç—ã:
    # - "admin:add_wizard"
    # - "admin:list_places"
    # - "admin:del_place"
    # - "admin:del:<–ù–∞–∑–≤–∞–Ω–∏–µ>"
    action = parts[1] if len(parts) > 1 else ""

    if action == "add_wizard":
        STATE[callback.from_user.id] = {"phase": "add_place_name"}
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–¥–∏–∫–∞ (–æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ).")
        await callback.answer()
        return

    if action == "list_places":
        lines = ["üìç –°–ø–∏—Å–æ–∫ –º–µ—Å—Ç:"]
        for name, p in sorted(PLACES.items()):
            tag = " (—Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è)" if p.get("free_time") else ""
            lines.append(f"- {name}{tag} ‚Äî ({p.get('lat')}, {p.get('lon')}), r={int(p.get('radius_m',RADIUS_M_DEFAULT))}–º")
        await callback.message.answer("\n".join(lines))
        await callback.answer()
        return

    if action == "del_place":
        names = [n for n,p in sorted(PLACES.items()) if not p.get("free_time")]
        if not names:
            await callback.message.answer("–ù–µ—Ç —Å–∞–¥–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            await callback.answer()
            return
        kb = InlineKeyboardMarkup()
        for n in names[:50]:
            kb.add(InlineKeyboardButton(f"üóë {n}", callback_data=f"admin:del:{n}"))
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–¥–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
        await callback.answer()
        return

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è "admin:del:<–ù–∞–∑–≤–∞–Ω–∏–µ>"
    if action == "del" and len(parts) == 3:
        name = parts[2]
        if name not in PLACES:
            await callback.message.answer(f"‚ùå –ú–µ—Å—Ç–æ ¬´{name}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await callback.answer()
            return
        if PLACES[name].get("free_time"):
            await callback.message.answer("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å SNR School.")
            await callback.answer()
            return

        # —É–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –º–µ—Å—Ç
        del PLACES[name]
        # —É–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö –¥–Ω–µ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        for wd in list(SCHEDULE.keys()):
            SCHEDULE[wd] = [s for s in SCHEDULE.get(wd, []) if s.get("place") != name]

        # —è–≤–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback.message.answer(f"‚úÖ –°–∞–¥–∏–∫ ¬´{name}¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
        await callback.answer("–£–¥–∞–ª–µ–Ω–æ")
        return

    if action == "list_today":
        now = datetime.now(TZ); wd = now.weekday()
        day = SCHEDULE.get(wd, [])
        lines = [f"–°–ª–æ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({weekday_ru(now)}):"]
        if not day: lines.append("‚Äî –Ω–µ—Ç ‚Äî")
        for s in day:
            lines.append(f"‚Ä¢ {s['place']}: {s['start']}‚Äì{s['end']}")
        await callback.message.answer("\n".join(lines))
        await callback.answer()
        return

    await callback.answer()

# ====== LATE CHECKER (—à—Ç—Ä–∞—Ñ—ã –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —É—á–∏—Ç–µ–ª—è–º) ======
async def late_watcher():
    """
    –ï–∂–µ–º–∏–Ω—É—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è:
    –µ—Å–ª–∏ –∫ start + LATE_GRACE_MIN –ù–ò–ö–¢–û –Ω–µ —Å–¥–µ–ª–∞–ª —á–µ–∫-–∏–Ω –≤ —Ä–∞–¥–∏—É—Å–µ ‚Äî —à–ª—ë–º 1 —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç.
    """
    await asyncio.sleep(3)
    while True:
        try:
            ensure_files()
            now = datetime.now(TZ)
            date_s = now.strftime("%Y-%m-%d")
            wd = now.weekday()
            day_slots = SCHEDULE.get(wd, [])
            if not day_slots:
                await asyncio.sleep(60); continue

            rows = safe_dict_reader(CHECKS_CSV)

            for slot in day_slots:
                place = slot["place"]
                if PLACES.get(place, {}).get("free_time"):
                    continue  # SNR –∏ –ø–æ–¥–æ–±–Ω—ã–µ –Ω–µ —à—Ç—Ä–∞—Ñ—É–µ–º

                # –≤—Ä–µ–º—è —Å–ª–æ—Ç–∞
                sh, sm = map(int, slot["start"].split(":"))
                start_dt = now.replace(hour=sh, minute=sm, second=0, microsecond=0)
                penalty_time = start_dt + timedelta(minutes=LATE_GRACE_MIN)

                # –µ—â—ë –Ω–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                if now < penalty_time:
                    continue

                slot_key = (date_s, wd, place, slot["start"])
                if slot_key in LATE_SENT_SLOTS:
                    continue  # —É–∂–µ —É–≤–µ–¥–æ–º–ª—è–ª–∏ –ø—Ä–æ —ç—Ç–æ—Ç —Å–ª–æ—Ç —Å–µ–≥–æ–¥–Ω—è

                # –ë—ã–ª –ª–∏ –•–û–¢–¨ –û–î–ò–ù –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–µ–∫-–∏–Ω?
                had_any_valid_in = False
                for r in rows:
                    r_place = r.get("place_full") or r.get("place_key")
                    if r_place != place:
                        continue
                    if r.get("date") != date_s:
                        continue
                    if r.get("action") != "in" or r.get("in_radius") != "1":
                        continue

                    # –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ CSV -> –ª–æ–∫–∞–ª—å–Ω–æ–µ aware-–≤—Ä–µ–º—è (TZ)
                    try:
                        rt_naive = datetime.strptime(f"{r.get('date')} {r.get('time')}", "%Y-%m-%d %H:%M")
                        rt = rt_naive.replace(tzinfo=TZ)
                    except Exception:
                        continue

                    # –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º, –µ—Å–ª–∏ —á–µ–∫-–∏–Ω –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ [start-30–º–∏–Ω ; penalty_time]
                    if (start_dt - timedelta(minutes=30)) <= rt <= penalty_time:
                        had_any_valid_in = True
                        break

                if not had_any_valid_in:
                    msg = (f"‚ö†Ô∏è –ù–µ—Ç —á–µ–∫-–∏–Ω–∞ –∫ {slot['start']} –≤ ¬´{place}¬ª "
                           f"({weekday_ru(now)}, {date_s}). –ì—Ä–µ–π—Å: {LATE_GRACE_MIN} –º–∏–Ω.")
                    await notify_admins(msg)
                    LATE_SENT_SLOTS.add(slot_key)

        except Exception as e:
            log.exception("late_watcher error: %s", e)
        finally:
            await asyncio.sleep(60)

# ====== –ì–õ–û–ë–ê–õ–¨–ù–´–ô –•–£–ö –ò–°–ö–õ–Æ–ß–ï–ù–ò–ô ======
@dp.errors_handler()
async def global_errors(update, error):
    if isinstance(error, Throttled):
        return True
    log.exception("Unhandled error: %r", error)
    with suppress(Exception):
        await notify_admins(f"‚ùóÔ∏è Unhandled error: <code>{type(error).__name__}</code> ‚Äî {error}")
    return True

# ====== –ó–ê–ü–£–°–ö ======
if __name__ == "__main__":
    try:
        ensure_files()
        load_profiles_cache()
        load_places_runtime()
        log.info("Starting polling...")
        loop = asyncio.get_event_loop()
        loop.create_task(late_watcher())
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        import traceback
        print("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ:", type(e).__name__, e)
        traceback.print_exc()
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ...")





