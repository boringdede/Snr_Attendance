# bot.py ‚Äî aiogram 2.25.1, SQLite, –∞–Ω—Ç–∏-–ø–µ—Ä–µ—Å—ã–ª, –±—ç–∫–∞–ø/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ SNR
# pip install aiogram==2.25.1

import os
import csv
import json
import asyncio
import logging
import sqlite3
from contextlib import suppress
from pathlib import Path
from datetime import datetime, timezone, timedelta

from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.exceptions import Throttled
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardRemove, InputFile
)

# ============ –ù–ê–°–¢–†–û–ô–ö–ò ============
HARDCODED_FALLBACK_TOKEN = "8278332572:AAHAYzg0_GvRmmWhUgbndOYlSwB790OfNHE"
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or HARDCODED_FALLBACK_TOKEN
if not API_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is not set.")

# –ê–¥–º–∏–Ω—ã –∏ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—ã
ADMIN_IDS = {1790286972, 2062714005}
ADMIN_CHAT_IDS = {-1002362042916}

# –ì–µ–æ/–≤—Ä–µ–º—è
RADIUS_M_DEFAULT = 200.0
CITY_TZ_HOURS = 5
LATE_GRACE_MIN = 10                         # –≥–ª–æ–±–∞–ª—å–Ω–∞—è ¬´–ø–æ–∑–¥–Ω–æ¬ª –¥–ª—è /late_watcher –ø–∏–Ω–≥–æ–≤ (–º–æ–∂–µ—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —á–µ–∫-–∏–Ω–∞)
REMINDERS_ON = os.getenv("REMINDERS", "0") == "1"  # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 10 –º–∏–Ω—É—Ç

# –ó–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ –º–µ—Å—Ç–æ (SNR ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–≥–¥–∞)
ALWAYS_PLACE_KEY = "SNR School"
ALWAYS_PLACE_FULL = "SNR School (–æ—Ñ–∏—Å)"
ALWAYS_PLACE_LAT = 41.322921
ALWAYS_PLACE_LON = 69.277808

# –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ SNR (–¢–û–õ–¨–ö–û –¥–ª—è SNR School)
# user_id: —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–µ –æ–ø–æ–∑–¥–∞–Ω–∏–µ (–º–∏–Ω—É—Ç—ã)
SNR_SPECIAL_GRACE = {
    5280510534: 15,   # –°–∏—Ç–æ—Ä–∞ –ú—É—Å–ª–∏–º–æ–≤–∞
    1677978086: 15,   # –ö–∞–º–æ–ª–∞ –ù–∞—Ä–∑–∏–µ–≤–∞
    1033120831: 10,   # –°–∞—Ä–≤–∞—Ä–±–µ–∫ –≠—à–º—É—Ä–æ–¥–æ–≤
    1790286972: 10,   # –ê–±–±–æ—Å—Ö–æ–Ω –ê–∑–ª–∞—Ä–æ–≤
}
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ SNR –∫ 09:00 (+10 –º–∏–Ω –º–∞–∫—Å–∏–º—É–º)
SNR_MUST_BE_9_ID = 7819786422
SNR_MUST_BE_9_GRACE = 10

# ---- –õ–û–ì–ò ----
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")
log = logging.getLogger("snr-checkin-bot")

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
try:
    from zoneinfo import ZoneInfo, ZoneInfoNotFoundError
    try:
        TZ = ZoneInfo("Asia/Tashkent")
    except ZoneInfoNotFoundError:
        TZ = timezone(timedelta(hours=CITY_TZ_HOURS))
except Exception:
    TZ = timezone(timedelta(hours=CITY_TZ_HOURS))

# ---- –§–ê–ô–õ–´ ----
DATA_DIR = Path("."); DATA_DIR.mkdir(parents=True, exist_ok=True)
DB_PATH = DATA_DIR / "data.db"
CHECKS_CSV = DATA_DIR / "checks.csv"
PROFILES_CSV = DATA_DIR / "profiles.csv"

# ====== –†–ê–ù–¢–ê–ô–ú ======
STATE = {}          # –≤–∏–∑–∞—Ä–¥—ã/—Å–æ—Å—Ç–æ—è–Ω–∏—è
LATE_SENT_SLOTS = set()
REMINDER_SENT = set()  # (date, place_key, start) —á—Ç–æ–±—ã 10-–º–∏–Ω—É—Ç–Ω—ã–µ –Ω–µ —Å–ª–∞–ª–∏ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ

# ====== –ë–û–¢ ======
bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# ====== –£–¢–ò–õ–ò–¢–´ ======
def weekday_ru(dt: datetime) -> str:
    return ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–í—Ç–æ—Ä–Ω–∏–∫","–°—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä–≥","–ü—è—Ç–Ω–∏—Ü–∞","–°—É–±–±–æ—Ç–∞","–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"][dt.weekday()]

def day_short(wd: int) -> str:
    return ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"][wd]

def haversine_m(lat1, lon1, lat2, lon2) -> float:
    from math import radians, sin, cos, atan2, sqrt
    R = 6371000.0
    p1, p2 = radians(lat1), radians(lat2)
    dphi = radians(lat2 - lat1)
    dlmb = radians(lon2 - lon1)
    a = sin(dphi/2)**2 + cos(p1)*cos(p2)*sin(dlmb/2)**2
    c = 2 * atan2(sqrt(a), sqrt(1-a))
    return R * c

def ask_contact_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True))
    kb.add(KeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return kb

def main_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"))
    kb.add(KeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å—Å—è"))
    kb.add(KeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return kb

def actions_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–ß–µ–∫-–∏–Ω", callback_data="act:in"))
    kb.add(InlineKeyboardButton("–ß–µ–∫-–∞—É—Ç", callback_data="act:out"))
    return kb

async def notify_admins(text: str):
    for chat_id in ADMIN_CHAT_IDS:
        with suppress(Exception):
            await bot.send_message(chat_id, text, disable_web_page_preview=True)

def pretty_m(m) -> str:
    try:
        return f"{int(round(float(m)))} –º"
    except Exception:
        return "-"

def is_forwarded(msg: types.Message) -> bool:
    return any([
        getattr(msg, "forward_date", None),
        getattr(msg, "forward_from", None),
        getattr(msg, "forward_from_chat", None),
        getattr(msg, "forward_sender_name", None),
        getattr(msg, "forward_from_message_id", None),
        getattr(msg, "forward_signature", None),
        hasattr(msg, "forward_origin") and getattr(msg, "forward_origin") is not None,
    ])

# ====== CSV ======
def ensure_csv_files():
    if not CHECKS_CSV.exists():
        with CHECKS_CSV.open("w", encoding="utf-8", newline="") as f:
            csv.writer(f, delimiter=";").writerow([
                "telegram_id","teacher_name","phone",
                "action","place_key","place_full",
                "date","time","weekday",
                "slot_start","slot_end",
                "lat","lon","distance_m","in_radius",
                "on_time","notes"
            ])
    if not PROFILES_CSV.exists():
        with PROFILES_CSV.open("w", encoding="utf-8", newline="") as f:
            csv.writer(f, delimiter=";").writerow(["telegram_id","teacher_name","phone"])

def write_check_to_csv(row_dict: dict):
    with CHECKS_CSV.open("a", encoding="utf-8", newline="") as f:
        w = csv.writer(f, delimiter=";")
        w.writerow([
            row_dict.get("telegram_id"),
            row_dict.get("teacher_name"),
            row_dict.get("phone",""),
            row_dict.get("action"),
            row_dict.get("place_key"),
            row_dict.get("place_full"),
            row_dict.get("date"),
            row_dict.get("time"),
            row_dict.get("weekday"),
            row_dict.get("slot_start"),
            row_dict.get("slot_end"),
            row_dict.get("lat"),
            row_dict.get("lon"),
            row_dict.get("distance_m"),
            1 if row_dict.get("in_radius") else 0,
            1 if row_dict.get("on_time") else 0,
            row_dict.get("notes","")
        ])

def write_profile_to_csv(uid:int, name:str, phone:str):
    rows = {}
    if PROFILES_CSV.exists():
        with PROFILES_CSV.open("r", encoding="utf-8", newline="") as f:
            r = csv.DictReader(f, delimiter=";")
            for row in r:
                try:
                    rows[int(row["telegram_id"])] = (row.get("teacher_name",""), row.get("phone",""))
                except Exception:
                    continue
    rows[uid] = (name, phone or "")
    with PROFILES_CSV.open("w", encoding="utf-8", newline="") as f:
        w = csv.writer(f, delimiter=";")
        w.writerow(["telegram_id","teacher_name","phone"])
        for k,(n,p) in rows.items():
            w.writerow([k,n,p])

# ====== –ë–ê–ó–ê –î–ê–ù–ù–´–• (SQLite) ======
def db():
    conn = sqlite3.connect(str(DB_PATH))
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = db(); cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS profiles (
        telegram_id INTEGER PRIMARY KEY,
        name TEXT NOT NULL,
        phone TEXT DEFAULT ''
    )""")
    cur.execute(f"""
    CREATE TABLE IF NOT EXISTS places (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        key TEXT UNIQUE NOT NULL,
        full TEXT NOT NULL,
        lat REAL,
        lon REAL,
        radius_m REAL DEFAULT {RADIUS_M_DEFAULT}
    )""")
    cur.execute("""
    CREATE TABLE IF NOT EXISTS schedule (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        weekday INTEGER NOT NULL,
        start TEXT NOT NULL,
        end TEXT NOT NULL,
        place_key TEXT NOT NULL,
        FOREIGN KEY(place_key) REFERENCES places(key)
    )""")
    cur.execute("""
    CREATE TABLE IF NOT EXISTS checks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id INTEGER NOT NULL,
        teacher_name TEXT NOT NULL,
        phone TEXT,
        action TEXT NOT NULL,
        place_key TEXT NOT NULL,
        place_full TEXT NOT NULL,
        date TEXT NOT NULL,
        time TEXT NOT NULL,
        weekday TEXT NOT NULL,
        slot_start TEXT NOT NULL,
        slot_end TEXT NOT NULL,
        lat REAL,
        lon REAL,
        distance_m REAL,
        in_radius INTEGER,
        on_time INTEGER,
        notes TEXT
    )""")
    cur.execute("""CREATE TABLE IF NOT EXISTS stopped (telegram_id INTEGER PRIMARY KEY)""")
    # –∏–Ω–¥–µ–∫—Å—ã
    cur.execute("CREATE INDEX IF NOT EXISTS idx_schedule_wd_place_start ON schedule(weekday, place_key, start)")
    cur.execute("CREATE INDEX IF NOT EXISTS idx_checks_date_place_action ON checks(date, place_key, action)")
    cur.execute("CREATE INDEX IF NOT EXISTS idx_checks_date_tid ON checks(date, telegram_id)")
    conn.commit(); conn.close()

def import_legacy_if_empty():
    """–û—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –µ—Å—Ç—å JSON-—Å–∏–¥ ‚Äî —Å–µ–π—á–∞—Å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º."""
    return

def ensure_always_place():
    conn = db(); cur = conn.cursor()
    cur.execute("SELECT key FROM places WHERE key=?", (ALWAYS_PLACE_KEY,))
    row = cur.fetchone()
    if not row:
        cur.execute("INSERT INTO places(key,full,lat,lon,radius_m) VALUES(?,?,?,?,?)",
                    (ALWAYS_PLACE_KEY, ALWAYS_PLACE_FULL, ALWAYS_PLACE_LAT, ALWAYS_PLACE_LON, RADIUS_M_DEFAULT))
    conn.commit(); conn.close()

def get_profile(uid:int):
    conn = db(); cur = conn.cursor()
    cur.execute("SELECT name, phone FROM profiles WHERE telegram_id=?", (uid,))
    row = cur.fetchone(); conn.close()
    if row: return {"name": row["name"], "phone": row["phone"]}
    return None

def save_profile(uid:int, name:str, phone:str):
    conn = db(); cur = conn.cursor()
    cur.execute("INSERT OR REPLACE INTO profiles(telegram_id,name,phone) VALUES(?,?,?)", (uid,name,phone or ""))
    conn.commit(); conn.close()
    write_profile_to_csv(uid, name, phone or "")

def list_places():
    conn = db(); cur = conn.cursor()
    cur.execute("SELECT key, full, lat, lon, radius_m FROM places ORDER BY key COLLATE NOCASE")
    rows = cur.fetchall(); conn.close()
    return rows

def add_place(key:str, full:str, lat:float, lon:float, radius:float):
    conn = db(); cur = conn.cursor()
    cur.execute("INSERT OR REPLACE INTO places(key,full,lat,lon,radius_m) VALUES(?,?,?,?,?)",
        (key, full, lat, lon, radius))
    conn.commit(); conn.close()

def delete_place(key:str):
    conn = db(); cur = conn.cursor()
    cur.execute("DELETE FROM schedule WHERE place_key=?", (key,))
    cur.execute("DELETE FROM places WHERE key=?", (key,))
    conn.commit(); conn.close()

def today_slots():
    wd = datetime.now(TZ).weekday()
    conn = db(); cur = conn.cursor()
    cur.execute("SELECT start,end,place_key FROM schedule WHERE weekday=? ORDER BY start", (wd,))
    rows = cur.fetchall(); conn.close()
    return rows

def list_schedule(wd:int):
    conn = db(); cur = conn.cursor()
    cur.execute("SELECT start,end,place_key FROM schedule WHERE weekday=? ORDER BY start", (wd,))
    rows = cur.fetchall(); conn.close()
    return rows

def add_lesson(wd:int, place_key:str, start:str, end:str):
    conn = db(); cur = conn.cursor()
    cur.execute("INSERT INTO schedule(weekday,start,end,place_key) VALUES(?,?,?,?)",
                (wd, start, end, place_key))
    conn.commit(); conn.close()

def delete_lesson(wd:int, place_key:str, start:str):
    conn = db(); cur = conn.cursor()
    cur.execute("DELETE FROM schedule WHERE weekday=? AND place_key=? AND start=?", (wd, place_key, start))
    conn.commit(); conn.close()

def is_stopped(uid:int)->bool:
    conn = db(); cur = conn.cursor()
    cur.execute("SELECT 1 FROM stopped WHERE telegram_id=?", (uid,))
    res = cur.fetchone()
    conn.close()
    return bool(res)

def set_stopped(uid:int, stop:bool):
    conn = db(); cur = conn.cursor()
    if stop:
        cur.execute("INSERT OR IGNORE INTO stopped(telegram_id) VALUES(?)", (uid,))
    else:
        cur.execute("DELETE FROM stopped WHERE telegram_id=?", (uid,))
    conn.commit(); conn.close()

# ====== BACKUP / RESTORE ======
def dump_data_for_backup() -> dict:
    conn = db(); cur = conn.cursor()
    cur.execute("SELECT key, full, lat, lon, radius_m FROM places ORDER BY key")
    places = [dict(r) for r in cur.fetchall()]
    cur.execute("SELECT weekday, start, end, place_key FROM schedule ORDER BY weekday, start")
    schedule = [dict(r) for r in cur.fetchall()]
    conn.close()
    return {"version": 1, "places": places, "schedule": schedule}

def load_data_from_backup(payload: dict):
    assert isinstance(payload, dict) and "places" in payload and "schedule" in payload
    conn = db(); cur = conn.cursor()
    cur.execute("DELETE FROM schedule")
    cur.execute("DELETE FROM places")
    for p in payload["places"]:
        cur.execute(
            "INSERT INTO places(key,full,lat,lon,radius_m) VALUES(?,?,?,?,?)",
            (p["key"], p["full"], p.get("lat"), p.get("lon"), p.get("radius_m") or RADIUS_M_DEFAULT)
        )
    for s in payload["schedule"]:
        cur.execute(
            "INSERT INTO schedule(weekday,start,end,place_key) VALUES(?,?,?,?)",
            (int(s["weekday"]), s["start"], s["end"], s["place_key"])
        )
    conn.commit(); conn.close()
    ensure_always_place()

@dp.message_handler(commands=["backup"])
async def cmd_backup(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞."); return
    data = dump_data_for_backup()
    path = DATA_DIR / "backup.json"
    path.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
    await bot.send_document(message.chat.id, InputFile(str(path)),
                            caption=f"backup {datetime.now(TZ).strftime('%Y-%m-%d %H:%M')}")

@dp.message_handler(commands=["restore"])
async def cmd_restore(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞."); return
    STATE[message.from_user.id] = {"phase": "await_restore_file"}
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª <code>backup.json</code> —Å –ø–æ–¥–ø–∏—Å—å—é <b>restore</b>.")

@dp.message_handler(content_types=["document"])
async def on_doc_restore(message: types.Message):
    uid = message.from_user.id
    if STATE.get(uid, {}).get("phase") != "await_restore_file":
        return
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞."); return
    if (message.caption or "").strip().lower() != "restore":
        await message.answer("–ù—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å—å (caption) <b>restore</b> —É —Ñ–∞–π–ª–∞."); return
    try:
        file = await bot.get_file(message.document.file_id)
        tmp = DATA_DIR / "restore_tmp.json"
        await bot.download_file(file.file_path, destination=tmp)
        payload = json.loads(tmp.read_text(encoding="utf-8"))
        load_data_from_backup(payload)
        STATE[uid] = {"phase":"idle"}
        await message.answer("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: —à–∫–æ–ª—ã/—Å–∞–¥—ã –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
    except Exception as e:
        log.exception("restore failed")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

# ====== –°–¢–ê–†–¢ / –°–¢–û–ü ======
@dp.message_handler(commands=["stop"])
async def cmd_stop(message: types.Message):
    uid = message.from_user.id
    set_stopped(uid, True)
    await message.answer("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start", reply_markup=ReplyKeyboardRemove())

@dp.message_handler(lambda m: is_stopped(m.from_user.id) and not (m.text or "").startswith("/start"), content_types=types.ContentTypes.ANY)
async def guard_stopped_messages(message: types.Message):
    return

@dp.callback_query_handler(lambda c: is_stopped(c.from_user.id))
async def guard_stopped_callbacks(callback: types.CallbackQuery):
    with suppress(Exception):
        await callback.answer()
    return

# ====== /start ======
@dp.message_handler(commands=["start","help"])
async def on_start(message: types.Message):
    ensure_csv_files()
    init_db()
    import_legacy_if_empty()
    ensure_always_place()
    uid = message.from_user.id
    set_stopped(uid, False)

    prof = get_profile(uid)
    if not prof:
        STATE[uid] = {"phase": "need_name"}
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–ò–º—è –∏ –§–∞–º–∏–ª–∏—é</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <i>–ê–∑–∏–∑ –ê–∑–∏–º–æ–≤</i>).",
                             reply_markup=ReplyKeyboardRemove())
        return
    STATE[uid] = {"phase": "idle"}
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{prof['name']}</b>! –ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=main_kb())

# ====== –ü–†–û–§–ò–õ–¨ ======
@dp.message_handler(commands=["id"])
async def cmd_id(message: types.Message):
    await message.answer(f"–í–∞—à Telegram ID: <code>{message.from_user.id}</code>")

@dp.message_handler(commands=["my"])
async def cmd_my(message: types.Message):
    uid = message.from_user.id
    prof = get_profile(uid) or {"name": message.from_user.full_name, "phone": ""}
    await message.answer(f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n–ò–º—è: <b>{prof['name']}</b>\n–¢–µ–ª–µ—Ñ–æ–Ω: <b>{prof.get('phone','')}</b>")

# ====== ¬´–†–ê–°–ü–ò–°–ê–ù–ò–ï –ù–ê –°–ï–ì–û–î–ù–Ø¬ª –° –ü–û–î–°–ü–ò–°–ö–û–ú –ü–û –®–ö–û–õ–ï ======
@dp.message_handler(commands=["schedule","today"])
async def cmd_schedule(message: types.Message):
    now = datetime.now(TZ); wd = now.weekday()
    rows = list_schedule(wd)
    schools_today = sorted({r["place_key"] for r in rows})
    ensure_always_place()
    if ALWAYS_PLACE_KEY not in schools_today:
        schools_today.append(ALWAYS_PLACE_KEY)
    if not schools_today:
        await message.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ <b>{weekday_ru(now)}</b>:\n‚Ä¢ (—Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç)")
        return
    kb = InlineKeyboardMarkup()
    for i, name in enumerate(schools_today[:50]):
        kb.add(InlineKeyboardButton(name, callback_data=f"tday:school:{i}"))
    STATE[message.from_user.id] = {"phase": "pick_school_today", "schools": schools_today}
    await message.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ <b>{weekday_ru(now)}</b>:\n–í—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ª–æ—Ç—ã.", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("tday:school:"))
async def cb_today_school(callback: types.CallbackQuery):
    uid = callback.from_user.id
    st = STATE.get(uid,{})
    idx = int(callback.data.split(":")[2])
    schools = st.get("schools",[])
    if idx<0 or idx>=len(schools):
        with suppress(Exception): await callback.answer()
        return
    school = schools[idx]
    wd = datetime.now(TZ).weekday()
    conn = db(); cur = conn.cursor()
    cur.execute("SELECT start,end FROM schedule WHERE weekday=? AND place_key=? ORDER BY start", (wd, school))
    slots = cur.fetchall(); conn.close()
    if not slots and school == ALWAYS_PLACE_KEY:
        await callback.message.answer(f"üè´ {school}\n‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏: 00:00‚Äì23:59 (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ)")
    elif not slots:
        await callback.message.answer(f"üè´ {school}\n‚Ä¢ (—Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç —Å–µ–≥–æ–¥–Ω—è)")
    else:
        lines = [f"üè´ {school} ‚Äî —Å–ª–æ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:"]
        for s in slots:
            lines.append(f"‚Ä¢ {s['start']}‚Äì{s['end']}")
        await callback.message.answer("\n".join(lines))
    await callback.answer()

# ====== –ê–î–ú–ò–ù –ú–ï–ù–Æ (–∫–∞–∫ –±—ã–ª–æ) ======
def admin_menu_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —à–∫–æ–ª—É", callback_data="admin:add_place"))
    kb.add(InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —à–∫–æ–ª", callback_data="admin:list_places"))
    kb.add(InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —à–∫–æ–ª—É", callback_data="admin:del_place"))
    kb.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫", callback_data="admin:add_lesson"))
    kb.add(InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫", callback_data="admin:del_lesson"))
    return kb

@dp.message_handler(commands=["admin"])
async def admin_menu(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞."); return
    await message.answer("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_menu_kb())

# ====== –í–ò–ó–ê–†–î–´ –î–û–ë–ê–í–õ–ï–ù–ò–Ø/–£–î–ê–õ–ï–ù–ò–Ø ======
@dp.callback_query_handler(lambda c: c.data == "admin:add_place")
async def cb_add_place(callback: types.CallbackQuery):
    uid = callback.from_user.id
    if uid not in ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    STATE[uid] = {"phase":"add_place_name"}
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã</b> (–∫–ª—é—á):")
    await callback.answer()

@dp.message_handler(lambda m: STATE.get(m.from_user.id,{}).get("phase")=="add_place_name")
async def add_place_name(message: types.Message):
    uid = message.from_user.id
    key = (message.text or "").strip()
    if not key:
        await message.answer("–ü—É—Å—Ç–æ. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã:"); return
    STATE[uid] = {"phase":"add_place_lat", "key":key, "full":key}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>—à–∏—Ä–æ—Ç—É</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä 41.322921):")

@dp.message_handler(lambda m: STATE.get(m.from_user.id,{}).get("phase")=="add_place_lat")
async def add_place_lat(message: types.Message):
    uid = message.from_user.id
    try:
        lat = float((message.text or "").replace(",", "."))
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–æ—Ç—É —á–∏—Å–ª–æ–º:"); return
    st = STATE[uid]; st["lat"]=lat; st["phase"]="add_place_lon"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–¥–æ–ª–≥–æ—Ç—É</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä 69.277808):")

@dp.message_handler(lambda m: STATE.get(m.from_user.id,{}).get("phase")=="add_place_lon")
async def add_place_lon(message: types.Message):
    uid = message.from_user.id
    try:
        lon = float((message.text or "").replace(",", "."))
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–≥–æ—Ç—É —á–∏—Å–ª–æ–º:"); return
    st = STATE[uid]; st["lon"]=lon; st["phase"]="add_place_radius"
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ <b>—Ä–∞–¥–∏—É—Å</b> –≤ –º–µ—Ç—Ä–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {int(RADIUS_M_DEFAULT)}):")

@dp.message_handler(lambda m: STATE.get(m.from_user.id,{}).get("phase")=="add_place_radius")
async def add_place_radius(message: types.Message):
    uid = message.from_user.id
    txt = (message.text or "").strip()
    radius = RADIUS_M_DEFAULT
    if txt:
        try: radius = float(txt.replace(",", "."))
        except Exception:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ä–∞–¥–∏—É—Å —á–∏—Å–ª–æ–º:"); return
    st = STATE[uid]
    add_place(st["key"], st["full"], st["lat"], st["lon"], radius)
    STATE[uid] = {"phase":"idle"}
    await message.answer(f"‚úÖ –®–∫–æ–ª–∞ <b>{st['key']}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n(lat={st['lat']}, lon={st['lon']}, r={int(radius)} –º)")

@dp.callback_query_handler(lambda c: c.data == "admin:list_places")
async def cb_list_places(callback: types.CallbackQuery):
    rows = list_places()
    if not rows:
        await callback.message.answer("–°–ø–∏—Å–æ–∫ —à–∫–æ–ª –ø—É—Å—Ç."); await callback.answer(); return
    lines = ["<b>–®–∫–æ–ª—ã:</b>"]
    for r in rows:
        lines.append(f"‚Ä¢ {r['key']} ‚Äî r={int(r['radius_m'])} –º; lat={r['lat']}, lon={r['lon']}")
    await callback.message.answer("\n".join(lines))
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "admin:del_place")
async def cb_del_place(callback: types.CallbackQuery):
    uid = callback.from_user.id
    if uid not in ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    rows = list_places()
    if not rows:
        await callback.message.answer("–ù–µ—Ç —à–∫–æ–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        await callback.answer(); return
    kb = InlineKeyboardMarkup()
    for r in rows[:50]:
        kb.add(InlineKeyboardButton(f"üóë {r['key']}", callback_data=f"admin:delp:{r['key']}"))
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("admin:delp:"))
async def cb_del_place_pick(callback: types.CallbackQuery):
    key = callback.data.split(":",2)[2]
    delete_place(key)
    await callback.message.answer(f"üóë –£–¥–∞–ª–µ–Ω–æ: {key} (–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏).")
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "admin:add_lesson")
async def cb_add_lesson(callback: types.CallbackQuery):
    uid = callback.from_user.id
    if uid not in ADMIN_IDS:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    kb = InlineKeyboardMarkup()
    for i, name in enumerate(["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"]):
        kb.add(InlineKeyboardButton(name, callback_data=f"al:wd:{i}"))
    STATE[uid] = {"phase":"add_lesson_wd"}
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=kb)
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("al:wd:"))
async def al_pick_wd(callback: types.CallbackQuery):
    uid = callback.from_user.id
    wd = int(callback.data.split(":")[2])
    rows = list_places()
    if not rows:
        await callback.message.answer("–ù–µ—Ç —à–∫–æ–ª. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —à–∫–æ–ª—É.")
        await callback.answer(); return
    kb = InlineKeyboardMarkup()
    for r in rows[:50]:
        kb.add(InlineKeyboardButton(r["key"], callback_data=f"al:place:{wd}:{r['key']}"))
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—É:", reply_markup=kb)
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("al:place:"))
async def al_pick_place(callback: types.CallbackQuery):
    uid = callback.from_user.id
    _,_,wd_s,key = callback.data.split(":",3)
    STATE[uid] = {"phase":"al_start", "wd":int(wd_s), "place":key}
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è <b>–Ω–∞—á–∞–ª–∞</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä 09:00):")
    await callback.answer()

@dp.message_handler(lambda m: STATE.get(m.from_user.id,{}).get("phase")=="al_start")
async def al_get_start(message: types.Message):
    uid = message.from_user.id
    t = (message.text or "").strip()
    if not t or len(t)!=5 or t[2]!=":":
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ HH:MM:"); return
    st = STATE[uid]; st["start"]=t; st["phase"]="al_end"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è <b>–æ–∫–æ–Ω—á–∞–Ω–∏—è</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä 12:30):")

@dp.message_handler(lambda m: STATE.get(m.from_user.id,{}).get("phase")=="al_end")
async def al_get_end(message: types.Message):
    uid = message.from_user.id
    t = (message.text or "").strip()
    if not t or len(t)!=5 or t[2]!=":":
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è HH:MM:"); return
    st = STATE[uid]
    add_lesson(st["wd"], st["place"], st["start"], t)
    STATE[uid] = {"phase":"idle"}
    await message.answer(f"‚úÖ –£—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω: {day_short(st['wd'])} ‚Ä¢ {st['place']} ‚Ä¢ {st['start']}-{t}")

@dp.callback_query_handler(lambda c: c.data == "admin:del_lesson")
async def cb_del_lesson(callback: types.CallbackQuery):
    uid = callback.from_user.id
    kb = InlineKeyboardMarkup()
    for i, name in enumerate(["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"]):
        kb.add(InlineKeyboardButton(name, callback_data=f"dl:wd:{i}"))
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=kb)
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("dl:wd:"))
async def dl_pick_wd(callback: types.CallbackQuery):
    wd = int(callback.data.split(":")[2])
    rows = list_schedule(wd)
    if not rows:
        await callback.message.answer("–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —É—Ä–æ–∫–æ–≤ –Ω–µ—Ç."); await callback.answer(); return
    kb = InlineKeyboardMarkup()
    for r in rows[:50]:
        kb.add(InlineKeyboardButton(f"{r['start']} {r['place_key']}", callback_data=f"dl:pick:{wd}:{r['place_key']}:{r['start']}"))
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("dl:pick:"))
async def dl_do(callback: types.CallbackQuery):
    _,_,wd_s,place_key,start = callback.data.split(":",4)
    delete_lesson(int(wd_s), place_key, start)
    await callback.message.answer(f"üóë –£—Ä–æ–∫ —É–¥–∞–ª—ë–Ω: {day_short(int(wd_s))} ‚Ä¢ {place_key} ‚Ä¢ {start}")
    await callback.answer()

# ====== –¢–ï–ö–°–¢ –†–û–£–¢–ï–† ======
@dp.message_handler(content_types=["text"])
async def text_router(message: types.Message):
    uid = message.from_user.id
    txt = (message.text or "").strip()
    st = STATE.get(uid, {})

    if st.get("phase") == "need_name" and not get_profile(uid):
        if " " not in txt or len(txt) < 3:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê–∑–∏–∑ –ê–∑–∏–º–æ–≤).")
            return
        save_profile(uid, txt, "")
        STATE[uid] = {"phase":"need_contact", "name": txt}
        await message.answer(f"–°–ø–∞—Å–∏–±–æ, <b>{txt}</b>! –¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:", reply_markup=ask_contact_kb())
        return

    if txt in ("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è","/today","/schedule"):
        await cmd_schedule(message); return

    if txt == "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å—Å—è":
        rows = today_slots()
        schools_today = sorted({r["place_key"] for r in rows})
        ensure_always_place()
        if ALWAYS_PLACE_KEY not in schools_today:
            schools_today.append(ALWAYS_PLACE_KEY)
        if not schools_today:
            await message.answer("–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —É—Ä–æ–∫–æ–≤."); return
        kb = InlineKeyboardMarkup()
        for i, name in enumerate(schools_today[:50]):
            kb.add(InlineKeyboardButton(name, callback_data=f"cs:school:{i}"))
        STATE[uid] = {"phase":"pick_school","schools":schools_today}
        await message.answer("‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—É:", reply_markup=kb)
        return

# ====== CONTACT ======
@dp.message_handler(content_types=["contact"])
async def on_contact(message: types.Message):
    uid = message.from_user.id
    st = STATE.get(uid, {})
    if get_profile(uid):
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ –µ—Å—Ç—å.", reply_markup=main_kb())
        return
    if st.get("phase") != "need_contact": return
    if not message.contact or message.contact.user_id != uid:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É."); return
    name = st.get("name") or message.from_user.full_name
    save_profile(uid, name, message.contact.phone_number)
    STATE[uid] = {"phase":"idle"}
    await message.answer(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω\n–ò–º—è: {name}\n–¢–µ–ª: {message.contact.phone_number}",
                         reply_markup=main_kb())

# ====== CALLBACKS: –≤—ã–±–æ—Ä —à–∫–æ–ª—ã/–≤—Ä–µ–º–µ–Ω–∏/–¥–µ–π—Å—Ç–≤–∏—è ======
@dp.callback_query_handler(lambda c: c.data.startswith("cs:school:"))
async def choose_school(callback: types.CallbackQuery):
    uid = callback.from_user.id
    st = STATE.get(uid,{})
    idx = int(callback.data.split(":")[2])
    schools = st.get("schools",[])
    if idx<0 or idx>=len(schools):
        with suppress(Exception): await callback.answer()
        return
    school = schools[idx]
    wd = datetime.now(TZ).weekday()
    conn = db(); cur = conn.cursor()
    cur.execute("SELECT start,end FROM schedule WHERE weekday=? AND place_key=? ORDER BY start", (wd, school))
    slots = cur.fetchall(); conn.close()

    # –ï—Å–ª–∏ —ç—Ç–æ SNR School –∏ —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 00:00‚Äì23:59
    if (not slots) and school == ALWAYS_PLACE_KEY:
        slots = [{"start": "00:00", "end": "23:59"}]

    kb = InlineKeyboardMarkup()
    for i, s in enumerate(slots[:50]):
        s_start = s['start'] if isinstance(s, sqlite3.Row) else s['start']
        s_end   = s['end']   if isinstance(s, sqlite3.Row) else s['end']
        kb.add(InlineKeyboardButton(f"{s_start}-{s_end}", callback_data=f"cs:time:{i}"))
    # –•—Ä–∞–Ω–∏–º —Å–ª–æ—Ç—ã –≤ STATE
    STATE[uid] = {"phase":"pick_time","slots":[{"start": (s['start'] if isinstance(s, sqlite3.Row) else s['start']),
                                                "end":   (s['end']   if isinstance(s, sqlite3.Row) else s['end']),
                                                "place": school} for s in slots]}
    await callback.message.answer(f"–®–∫–æ–ª–∞: {school}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=kb)
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("cs:time:"))
async def choose_time(callback: types.CallbackQuery):
    uid = callback.from_user.id
    st = STATE.get(uid,{})
    idx = int(callback.data.split(":")[2])
    slots = st.get("slots",[])
    if idx<0 or idx>=len(slots):
        with suppress(Exception): await callback.answer()
        return
    slot = slots[idx]
    STATE[uid] = {"phase":"pick_action","slot":slot}
    await callback.message.answer(f"{slot['place']} {slot['start']}-{slot['end']}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=actions_kb())
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("act:"))
async def on_action(callback: types.CallbackQuery):
    uid = callback.from_user.id
    st = STATE.get(uid,{})
    action = callback.data.split(":")[1]
    slot = st.get("slot")
    if not slot:
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–Ω–æ–≤–æ –≤—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—É –∏ –≤—Ä–µ–º—è (—Å–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω).",
                                      reply_markup=main_kb())
        with suppress(Exception): await callback.answer()
        return

    STATE[uid] = {"phase":"await_location","slot":slot,"action":action}
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True))
    await callback.message.answer(f"{'–ß–µ–∫-–∏–Ω' if action=='in' else '–ß–µ–∫-–∞—É—Ç'} –¥–ª—è {slot['place']}. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=kb)
    await callback.answer()

# ====== –û–¢–ü–†–ê–í–ö–ê –û–¢–ß–Å–¢–ê –í –ê–î–ú–ò–ù-–ß–ê–¢ ======
async def report_check_to_admins(*, teacher_name: str, place_full: str, weekday_str: str,
                                 now_str: str, slot_start: str, slot_end: str, action: str,
                                 in_radius, dist, on_time_flag, lat: float, lon: float,
                                 is_snr: bool, show_time_status: bool):
    act_text = "–ß–µ–∫-–∏–Ω" if action == "in" else "–ß–µ–∫-–∞—É—Ç"
    status = []

    # –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ ¬´–≤–æ –≤—Ä–µ–º—è/–ø–æ–∑–¥–Ω–æ¬ª —Å–∫—Ä—ã–≤–∞–µ–º –¥–ª—è SNR –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if show_time_status:
        if on_time_flag is True:
            status.append("‚úÖ –í–û –í–†–ï–ú–Ø")
        elif on_time_flag is False:
            status.append("üõë –ü–û–ó–î–ù–û")

    # –†–∞–¥–∏—É—Å
    if in_radius is True:
        status.append(f"‚úÖ –í —Ä–∞–¥–∏—É—Å–µ ({pretty_m(dist)})")
    elif in_radius is False:
        status.append(f"üö´ –í–Ω–µ —Ä–∞–¥–∏—É—Å–∞ ({pretty_m(dist)})")

    text = (
        f"üìç <b>{teacher_name}</b>\n"
        f"üè´ {place_full}\n"
        f"üìÖ {weekday_str}\n"
        f"‚è±Ô∏è {now_str}\n"
        f"üïò –°–ª–æ—Ç: {slot_start}‚Äì{slot_end}\n"
        f"üîÑ –î–µ–π—Å—Ç–≤–∏–µ: <b>{act_text}</b>\n"
        + ("\n".join(status) if status else "")
        + f"\nüìç <a href='https://maps.google.com/?q={lat:.6f},{lon:.6f}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ</a>"
    )

    for chat_id in ADMIN_CHAT_IDS:
        with suppress(Exception):
            await bot.send_message(chat_id, text, disable_web_page_preview=False)
            await bot.send_location(chat_id, latitude=lat, longitude=lon, disable_notification=True)

# ====== LOCATION (–ì–õ–ê–í–ù–´–ô: –∂—ë—Å—Ç–∫–∏–π —Ä–∞–¥–∏—É—Å, –∂—ë—Å—Ç–∫–æ–µ –æ–ø–æ–∑–¥–∞–Ω–∏–µ) ======
@dp.message_handler(content_types=["location"])
async def on_location(message: types.Message):
    uid = message.from_user.id
    st = STATE.get(uid,{})
    if st.get("phase")!="await_location": return

    # –ó–∞–ø—Ä–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∫–∏
    if is_forwarded(message):
        await message.answer("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –∫–Ω–æ–ø–∫–æ–π ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é¬ª.")
        return

    slot = st.get("slot"); action = st.get("action")
    if not slot or not action:
        await message.answer("–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ ¬´‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å—Å—è¬ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—É/–≤—Ä–µ–º—è –∑–∞–Ω–æ–≤–æ.",
                             reply_markup=main_kb())
        STATE[uid] = {"phase":"idle"}
        return

    prof = get_profile(uid) or {"name":message.from_user.full_name, "phone":""}

    conn = db(); cur = conn.cursor()
    cur.execute("SELECT full, lat, lon, radius_m FROM places WHERE key=?", (slot["place"],))
    pl = cur.fetchone()
    if not pl:
        await message.answer("‚ùó –®–∫–æ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=main_kb());
        STATE[uid] = {"phase":"idle"}
        return

    lat = message.location.latitude
    lon = message.location.longitude

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–¥–∏—É—Å–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê –¥–ª—è –ø—Ä–∏—ë–º–∞ —á–µ–∫-–∏–Ω–∞
    can_check_radius = (pl["lat"] is not None and pl["lon"] is not None)
    dist=None; in_radius=None
    if can_check_radius:
        dist=haversine_m(lat,lon,pl["lat"],pl["lon"])
        in_radius=dist<= (pl["radius_m"] or RADIUS_M_DEFAULT)
    if (not can_check_radius) or (in_radius is not True):
        # –ù–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º —á–µ–∫-–∏–Ω
        await message.answer("–í—ã –Ω–µ –≤ —Ä–∞–¥–∏—É—Å–µ üõë\n–ü–æ–¥–æ–π–¥–∏—Ç–µ –±–ª–∏–∂–µ –∫ –º–µ—Å—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_kb())
        STATE[uid]={"phase":"idle"}
        return

    now=datetime.now(TZ)
    wd_name = weekday_ru(now)
    act_text = "–ß–µ–∫-–∏–Ω" if action=="in" else "–ß–µ–∫-–∞—É—Ç"

    # === –û—Ü–µ–Ω–∫–∞ ¬´–≤–æ –≤—Ä–µ–º—è/–ø–æ–∑–¥–Ω–æ¬ª ===
    s_h, s_m = map(int, str(slot['start']).split(":"))
    start_dt = now.replace(hour=s_h, minute=s_m, second=0, microsecond=0)

    is_snr = (slot["place"] == ALWAYS_PLACE_KEY)

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:
    # 1) –î–ª—è –ù–ï SNR: –¥–æ–ø—É—Å–∫ = 0 –º–∏–Ω—É—Ç (—Å—Ç—Ä–æ–≥–æ). –õ—é–±–∞—è –º–∏–Ω—É—Ç–∞ –ø–æ–∑–∂–µ ‚Äî –ø–æ–∑–¥–Ω–æ.
    # 2) –î–ª—è SNR: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Ä–µ–º–µ–Ω–∏. –ù–û:
    #    - –æ—Å–æ–±—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ SNR –∏–º–µ—é—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é ¬´grace¬ª
    #    - —Å–ø–µ—Ü-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫ 09:00 (+10)
    show_time_status = True
    grace_min = 0

    if not is_snr:
        grace_min = 0
    else:
        # SNR ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–∞—Ç—É—Å—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        show_time_status = False
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ SNR
        if uid in SNR_SPECIAL_GRACE:
            grace_min = SNR_SPECIAL_GRACE[uid]
            show_time_status = True
        elif uid == SNR_MUST_BE_9_ID:
            # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∫ 09:00 (+10)
            must_h, must_m = 9, 0
            start_dt = now.replace(hour=must_h, minute=must_m, second=0, microsecond=0)
            grace_min = SNR_MUST_BE_9_GRACE
            show_time_status = True
        else:
            grace_min = 0  # –Ω–µ –≤–∞–∂–Ω–æ ‚Äî —Å—Ç–∞—Ç—É—Å –≤—Å—ë —Ä–∞–≤–Ω–æ —Å–∫—Ä—ã—Ç

    on_time_flag = None
    if action == "in":
        on_time_flag = (now <= start_dt + timedelta(minutes=grace_min))

    # === –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ===
    lines = [
        f"üìç <b>{prof['name']}</b>",
        f"üè´ {pl['full']}",
        f"üìÖ {wd_name}",
        f"‚è±Ô∏è {now.strftime('%H:%M %Y-%m-%d')}",
        f"üïò –°–ª–æ—Ç: {slot['start']}‚Äì{slot['end']}",
        f"üîÑ –î–µ–π—Å—Ç–≤–∏–µ: <b>{act_text}</b>",
    ]

    # –î–ª—è SNR –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –≤—ã–≤–æ–¥–∏–º ¬´–≤–æ –≤—Ä–µ–º—è/–ø–æ–∑–¥–Ω–æ¬ª, —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –∏ —Ä–∞–¥–∏—É—Å
    if show_time_status:
        if action == "in":
            if on_time_flag:
                lines.append("‚úÖ –í–û –í–†–ï–ú–Ø")
            else:
                lines.append("üõë –ü–û–ó–î–ù–û")
    # –†–∞–¥–∏—É—Å —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω (–∏–Ω–∞—á–µ –±—ã –≤—ã—à–ª–∏), –Ω–æ –ø–æ–∫–∞–∂–µ–º —Ñ–∞–∫—Ç
    lines.append(f"‚úÖ –í —Ä–∞–¥–∏—É—Å–µ ({pretty_m(dist)})")

    panel_text = "\n".join(lines)
    await message.answer(panel_text, reply_markup=main_kb())

    # === –û—Ç—á—ë—Ç –≤ –∞–¥–º–∏–Ω-—á–∞—Ç (–æ—Å—Ç–∞–≤–∏—Ç—å) ===
    try:
        await report_check_to_admins(
            teacher_name=prof['name'],
            place_full=pl['full'],
            weekday_str=wd_name,
            now_str=now.strftime('%H:%M %Y-%m-%d'),
            slot_start=slot['start'],
            slot_end=slot['end'],
            action=action,
            in_radius=True,
            dist=dist,
            on_time_flag=on_time_flag,
            lat=lat,
            lon=lon,
            is_snr=is_snr,
            show_time_status=show_time_status
        )
    except Exception:
        log.exception("report_check_to_admins failed")

    # === –ó–∞–ø–∏—Å—å –≤ –ë–î/CSV ===
    on_time_int = None
    if action == "in" and on_time_flag is not None:
        on_time_int = 1 if on_time_flag else 0

    conn = db(); cur = conn.cursor()
    cur.execute("""INSERT INTO checks(
        telegram_id,teacher_name,phone,action,place_key,place_full,date,time,weekday,
        slot_start,slot_end,lat,lon,distance_m,in_radius,on_time,notes
    ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)""", (
        uid, prof["name"], prof.get("phone",""), action, slot["place"], pl["full"],
        now.strftime("%Y-%m-%d"), now.strftime("%H:%M"), wd_name,
        slot["start"], slot["end"], float(f"{lat:.6f}"), float(f"{lon:.6f}"),
        float(round(dist,2)) if dist is not None else None,
        1,  # in_radius ‚Äî –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ True –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ
        on_time_int,
        ""
    ))
    conn.commit(); conn.close()

    write_check_to_csv({
        "telegram_id": uid,
        "teacher_name": prof["name"],
        "phone": prof.get("phone",""),
        "action": action,
        "place_key": slot["place"],
        "place_full": pl["full"],
        "date": now.strftime("%Y-%m-%d"),
        "time": now.strftime("%H:%M"),
        "weekday": wd_name,
        "slot_start": slot["start"],
        "slot_end": slot["end"],
        "lat": f"{lat:.6f}",
        "lon": f"{lon:.6f}",
        "distance_m": float(round(dist,2)) if dist is not None else "",
        "in_radius": True,
        "on_time": (1 if on_time_flag else 0) if on_time_flag is not None else 0,
        "notes": ""
    })

    STATE[uid]={"phase":"idle"}

# ====== –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –ò –ö–û–ù–¢–†–û–õ–¨ –û–ü–û–ó–î–ê–ù–ò–ô (—Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞) ======
async def late_watcher():
    await asyncio.sleep(3)
    while True:
        try:
            now = datetime.now(TZ)
            wd = now.weekday()
            date_s = now.strftime("%Y-%m-%d")

            conn = db(); cur = conn.cursor()
            cur.execute("SELECT start,end,place_key FROM schedule WHERE weekday=?", (wd,))
            slots = cur.fetchall()
            cur.execute("SELECT telegram_id FROM profiles")
            teachers = [r["telegram_id"] for r in cur.fetchall()]
            cur.execute("SELECT telegram_id, place_key FROM checks WHERE date=? AND action='in'", (date_s,))
            ins = {(r["telegram_id"], r["place_key"]) for r in cur.fetchall()}
            conn.close()

            for slot in slots:
                sh,sm=map(int,slot["start"].split(":"))
                start_dt=now.replace(hour=sh,minute=sm,second=0,microsecond=0)

                # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 10 –º–∏–Ω—É—Ç
                if REMINDERS_ON:
                    rem_key = (date_s, slot["place_key"], slot["start"])
                    if start_dt - timedelta(minutes=10) <= now < start_dt and rem_key not in REMINDER_SENT:
                        for tid in teachers:
                            with suppress(Exception):
                                await bot.send_message(
                                    tid,
                                    f"‚è∞ –ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç —É –≤–∞—Å —É—Ä–æ–∫ –≤ <b>{slot['place_key']}</b> ({slot['start']}‚Äì{slot['end']}). –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è!"
                                )
                        REMINDER_SENT.add(rem_key)

                # –°—Ç–∞—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ‚Äî –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ—Ç —á–µ–∫-–∏–Ω–∞ –ø–æ –º–µ—Å—Ç—É
                late_dt = start_dt + timedelta(minutes=LATE_GRACE_MIN)
                if now>late_dt:
                    slot_key=(date_s,wd,slot["place_key"],slot["start"])
                    if slot_key in LATE_SENT_SLOTS:
                        continue
                    if not any(pk == slot["place_key"] for (_tid, pk) in ins):
                        await notify_admins(f"‚ö†Ô∏è –ù–µ—Ç —á–µ–∫-–∏–Ω–∞ {slot['place_key']} {slot['start']}")
                        LATE_SENT_SLOTS.add(slot_key)

        except Exception:
            log.exception("late_watcher")
        await asyncio.sleep(60)

# ====== ERRORS ======
@dp.errors_handler()
async def global_errors(update, error):
    if isinstance(error, Throttled): return True
    log.exception("Unhandled: %r", error); return True

# ====== MAIN ======
if __name__=="__main__":
    ensure_csv_files()
    init_db()
    import_legacy_if_empty()
    ensure_always_place()
    log.info("Starting polling‚Ä¶")
    loop=asyncio.get_event_loop()
    loop.create_task(late_watcher())
    executor.start_polling(dp, skip_updates=True)
